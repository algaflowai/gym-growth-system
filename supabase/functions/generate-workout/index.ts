
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { studentData } = await req.json();
    
    if (!studentData) {
      return new Response(
        JSON.stringify({ error: 'Dados do aluno s√£o obrigat√≥rios' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (!openAIApiKey) {
      // Retorna uma recomenda√ß√£o b√°sica se n√£o houver chave da OpenAI
      const basicRecommendation = `
RECOMENDA√á√ÉO DE TREINO PERSONALIZADA
=====================================

ALUNO: ${studentData.name}
OBJETIVO: ${studentData.main_goal || 'Condicionamento f√≠sico geral'}
G√äNERO: ${studentData.gender || 'N√£o informado'}

üìã AN√ÅLISE DO PERFIL:
- Aluno com foco em ${studentData.main_goal || 'condicionamento f√≠sico geral'}
- Considera√ß√µes especiais: ${studentData.health_issues || 'Nenhuma'}
- Restri√ß√µes: ${studentData.restrictions || 'Nenhuma'}

üèãÔ∏è PROGRAMA SEMANAL SUGERIDO:

SEGUNDA-FEIRA - TREINO A (Peito, Tr√≠ceps, Ombros)
‚Ä¢ Supino reto: 3x10-12
‚Ä¢ Supino inclinado: 3x10-12  
‚Ä¢ Crucifixo: 3x12-15
‚Ä¢ Desenvolvimento: 3x10-12
‚Ä¢ Tr√≠ceps testa: 3x12-15

QUARTA-FEIRA - TREINO B (Costas, B√≠ceps)
‚Ä¢ Puxada frontal: 3x10-12
‚Ä¢ Remada curvada: 3x10-12
‚Ä¢ Remada unilateral: 3x10-12
‚Ä¢ Rosca direta: 3x12-15
‚Ä¢ Rosca martelo: 3x12-15

SEXTA-FEIRA - TREINO C (Pernas, Gl√∫teos)
‚Ä¢ Agachamento: 3x12-15
‚Ä¢ Leg press: 3x15-20
‚Ä¢ Extensora: 3x15-20
‚Ä¢ Flexora: 3x15-20
‚Ä¢ Panturrilha: 4x20-25

‚ö†Ô∏è OBSERVA√á√ïES IMPORTANTES:
- Sempre realizar aquecimento de 10 minutos
- Alongamento ao final de cada treino
- Hidrata√ß√£o constante durante o exerc√≠cio
- Progress√£o gradual de cargas

üí° DICAS NUTRICIONAIS:
- Manter hidrata√ß√£o adequada
- Consumir prote√≠nas em todas as refei√ß√µes
- Carboidratos antes do treino
- Prote√≠na p√≥s-treino para recupera√ß√£o

Configure a chave da OpenAI para recomenda√ß√µes mais detalhadas e personalizadas.
      `;
      
      return new Response(JSON.stringify({ 
        recommendation: basicRecommendation,
        isBasic: true 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Prompt personalizado conforme especificado
    const customPrompt = `Voc√™ √© um personal trainer especializado em musucula√ß√£o. Com base nos dados do aluno selecionado, analise o nome para identificar o g√™nero e os objetivos cadastrados para gerar uma recomenda√ß√£o de treino personalizada.
INSTRU√á√ïES:
Para nomes femininos:

Crie um treino completo de corpo inteiro
D√™ √™nfase especial aos m√∫sculos inferiores (gl√∫teos, quadr√≠ceps, posterior de coxa, panturrilhas)
Inclua exerc√≠cios para membros superiores, core e cardio, mas mantenha o foco nos inferiores
Considere os objetivos espec√≠ficos da aluna (perda de peso, tonifica√ß√£o, ganho de massa, etc.)

Para nomes masculinos:

Crie um treino completo de corpo inteiro
D√™ √™nfase especial aos m√∫sculos superiores (peito, costas, ombros, b√≠ceps, tr√≠ceps)
Inclua exerc√≠cios para membros inferiores e core, mas mantenha o foco nos superiores
Considere os objetivos espec√≠ficos do aluno (ganho de massa, defini√ß√£o, for√ßa, etc.)

FORMATO DA RESPOSTA:

Estruture o treino por dias da semana (3-5 dias)
Para cada dia, liste: grupos musculares, exerc√≠cios espec√≠ficos, s√©ries, repeti√ß√µes
Inclua dicas de execu√ß√£o e progress√£o
Adapte a intensidade aos objetivos cadastrados
Use linguagem motivadora e profissional

Dados do aluno: ${studentData.name}, ${studentData.main_goal || 'Condicionamento f√≠sico geral'}, ${studentData.health_issues || ''} ${studentData.restrictions || ''}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um personal trainer especializado e experiente. Crie treinos personalizados, detalhados e seguros baseados nas informa√ß√µes fornecidas. Para treinos femininos, priorize membros inferiores (pernas, gl√∫teos). Para treinos masculinos, priorize membros superiores (peito, costas, ombros, bra√ßos).' 
          },
          { 
            role: 'user', 
            content: customPrompt 
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const recommendation = data.choices[0].message.content;

    return new Response(JSON.stringify({ 
      recommendation,
      isBasic: false 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-workout function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      recommendation: 'Erro ao gerar recomenda√ß√£o. Tente novamente mais tarde.',
      isBasic: true
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
